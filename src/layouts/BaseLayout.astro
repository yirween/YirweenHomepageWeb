---
import '../styles/global.css';
const { pageTitle } = Astro.props;
---
<html lang="zh-CN">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="/ynhdimgRD-nobg.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle} - Yirween</title>
</head>
<body>
    <script>
        const upper = document.getElementById("scrollup");
        upper?.addEventListener("click", function () {
            window.scrollTo({ top: 0, left: 0, behavior: "smooth" });
        });
    </script>
    <header>
        <nav>
            <div class="navigation-bar">
                <a class="nav-links" href="/" title="首页">首页</a>

                <a class="nav-links" href="/about" title="关于我">关于</a>

                <a class="nav-links" href="/links" title="联系我">链接</a>

                <a class="nav-links" href="/more" title="更多">作品</a>
            </div>
        </nav>
    </header>
    <slot />
    <div class="scrollBar" id="scrollBar">
        <div class="scrollLine" id="scrollLine">
            <div class="scrollBall" id="scrollBall"></div>
        </div>
        <div class="lastView" id="lastView"></div>
    </div>

    <!-- <div class="scrollup" id="scrollup"><svg xmlns="http://www.w3.org/2000/svg" width="100" height="80" viewBox="-3 .5 29 25"><g fill="none" fill-rule="evenodd"><path d="M24 0v24H0V0zM12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035q-.016-.005-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093q.019.005.029-.008l.004-.014l-.034-.614q-.005-.019-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z"/><path fill="currentColor" d="M10.94 7.94a1.5 1.5 0 0 1 2.12 0l5.658 5.656a1.5 1.5 0 1 1-2.122 2.121L12 11.122l-4.596 4.596a1.5 1.5 0 1 1-2.122-2.12z"/></g></svg></div> -->
    <script>
        // 滚动条滚动
        // let pageHeight = document.body.scrollHeight - window.screen.height;
        // let nowScroll;
        // let shouldY;
        // var scrollLine = document.getElementById("scrollLine");
        // document.addEventListener("scroll", (event) => {
        //     nowScroll = window.scrollY;
        //     shouldY = ((nowScroll / pageHeight) * 65 + 5) - 145;
        //     scrollLine?.style.setProperty('top', shouldY + 'vh');
        // });

                // 获取元素
        const scrollBar = document.getElementById('scrollBar');
        const scrollLine = document.getElementById('scrollLine');
        const scrollBall = document.getElementById('scrollBall');
        const lastView = document.getElementById('lastView');

        // 变量定义
        let pageHeight = document.body.scrollHeight - window.innerHeight;
        let nowScroll = 0;
        let shouldY = 0;
        let clickStartTime = 0;
        let lastViewPosition: number | null = null;
        let isDragging = false;
        let dragStartY = 0;
        let dragStartScroll = 0;

        // 更新页面高度
        function updatePageHeight() {
            pageHeight = document.body.scrollHeight - window.innerHeight;
        }

        // 滚动事件监听
        document.addEventListener("scroll", (event) => {
            nowScroll = window.scrollY;
            shouldY = (nowScroll / pageHeight) * 85 - 140;
            scrollLine.style.top = shouldY + 'vh';
        });

        // 窗口大小改变时更新页面高度
        window.addEventListener('resize', updatePageHeight);

        // 点击事件处理
        scrollBall.addEventListener('mousedown', (e) => {
            e.preventDefault();
            clickStartTime = Date.now();
            dragStartY = e.clientY;
            dragStartScroll = nowScroll;
            
            // 添加拖动样式
            scrollBall.classList.add('dragging');
            isDragging = true;

            // 鼠标移动事件
            const mouseMoveHandler = (moveEvent) => {
                if (!isDragging) return;
                
                const deltaY = (moveEvent.clientY - dragStartY) * 1.1764;
                
                // 如果移动距离超过10px，认为是拖动
                if (Math.abs(deltaY) > 10) {
                    const scrollDelta = (deltaY / window.innerHeight) * pageHeight;
                    let newScroll = dragStartScroll + scrollDelta;
                    
                    // 限制滚动范围
                    newScroll = Math.max(0, Math.min(pageHeight, newScroll));
                    
                    window.scrollTo(0, newScroll);
                }
            };

            // 鼠标抬起事件
            const mouseUpHandler = (upEvent) => {
                const clickDuration = Date.now() - clickStartTime;
                
                // 移除事件监听
                document.removeEventListener('mousemove', mouseMoveHandler);
                document.removeEventListener('mouseup', mouseUpHandler);
                
                // 移除拖动样式
                scrollBall.classList.remove('dragging');
                isDragging = false;

                // 如果是点击（<0.7s）且移动距离小于10px
                if (clickDuration < 700 && Math.abs(upEvent.clientY - dragStartY) < 10) {
                    // 记录当前位置
                    lastViewPosition = nowScroll;
                    
                    // 显示lastView在当前位置
                    showLastViewAtCurrentPosition();
                    
                    // 滚动到顶部
                    window.scrollTo({
                        top: 0,
                        behavior: 'smooth'
                    });
                }
            };

            // 添加事件监听
            document.addEventListener('mousemove', mouseMoveHandler);
            document.addEventListener('mouseup', mouseUpHandler);
        });

        // 在当前位置显示lastView
        function showLastViewAtCurrentPosition() {
            // 获取滚动条当前位置
            const scrollLineRect = scrollLine.getBoundingClientRect();
            const scrollBarRect = scrollBar.getBoundingClientRect();
            
            // 计算lastView的位置（相对于scrollBar）
            const lastViewTop = scrollLineRect.top - scrollBarRect.top + scrollBall.offsetTop;
            
            // 设置lastView位置并显示
            lastView.style.top = (lastViewTop - 8) + 'px'; // 减去半径居中
            lastView.style.display = 'block';
        }

        // lastView点击事件
        lastView.addEventListener('click', (e) => {
            e.stopPropagation();
            
            if (lastViewPosition !== null) {
                // 滚动到记录的位置
                window.scrollTo({
                    top: lastViewPosition,
                    behavior: 'smooth'
                });
                
                // 隐藏lastView
                lastView.style.display = 'none';
            }
        });

        // 页面滚动时隐藏lastView
        // document.addEventListener('scroll', () => {
        //     lastView.style.display = 'none';
        // });

        // 防止滚动条点击事件冒泡
        scrollBar.addEventListener('click', (e) => {
            e.stopPropagation();
        });

        // 初始化
        updatePageHeight();

    </script>
</body>
</html>