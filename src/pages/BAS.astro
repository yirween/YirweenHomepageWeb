<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BAS 3D</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f7fa;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        header {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            color: white;
            padding: 20px;
            text-align: center;
        }
        
        h1 {
            font-size: 28px;
            margin-bottom: 10px;
        }
        
        .description {
            font-size: 16px;
            opacity: 0.9;
        }
        
        .content {
            display: flex;
            flex-wrap: wrap;
            padding: 20px;
            gap: 20px;
        }
        
        .input-section, .output-section {
            flex: 1;
            min-width: 300px;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 8px;
        }
        
        h2 {
            font-size: 20px;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #eee;
            color: #2575fc;
        }
        
        .input-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        input[type="number"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        
        .advanced-toggle {
            margin-top: 20px;
            background: none;
            border: none;
            color: #2575fc;
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
        }
        
        .advanced-toggle:hover {
            text-decoration: underline;
        }
        
        .advanced-options {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px dashed #ddd;
            display: none;
        }
        
        .advanced-options.show {
            display: block;
        }
        
        .format-selector {
            margin-bottom: 20px;
        }
        
        .format-buttons {
            display: flex;
            gap: 10px;
        }
        
        .format-btn {
            flex: 1;
            padding: 10px;
            background-color: #eee;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.3s;
        }
        
        .format-btn.active {
            background-color: #2575fc;
            color: white;
        }
        
        .output-result {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #eee;
            min-height: 300px;
            font-family: monospace;
            white-space: pre-wrap;
        }
        
        .output-line {
            margin-bottom: 8px;
        }
        
        .output-inline {
            line-height: 1.8;
        }
        
        @media (max-width: 768px) {
            .content {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>BAS 3D</h1>
            <p class="description"></p>
        </header>
        
        <div class="content">
            <div class="input-section">
                <h2>输入参数</h2>
                
                <div class="input-group">
                    <label for="x">X 坐标</label>
                    <input type="number" id="x" value="0" step="0.01">
                </div>
                
                <div class="input-group">
                    <label for="y">Y 坐标</label>
                    <input type="number" id="y" value="0" step="0.01">
                </div>
                
                <div class="input-group">
                    <label for="z">Z 坐标</label>
                    <input type="number" id="z" value="1" step="0.01">
                </div>
                
                <div class="input-group">
                    <label for="rotateX">RotateX (角度)</label>
                    <input type="number" id="rotateX" value="0" step="0.01">
                </div>
                
                <div class="input-group">
                    <label for="rotateY">RotateY (角度)</label>
                    <input type="number" id="rotateY" value="0" step="0.01">
                </div>
                
                <div class="input-group">
                    <label for="scale">Scale</label>
                    <input type="number" id="scale" value="1" step="0.01">
                </div>
                
                <div class="input-group">
                    <label for="alpha">Alpha</label>
                    <input type="number" id="alpha" value="1" step="0.01" min="0" max="1">
                </div>
                
                <button class="advanced-toggle" id="advancedToggle">▼ 高级选项</button>
                
                <div class="advanced-options" id="advancedOptions">
                    <div class="input-group">
                        <label for="focalLength">焦距 (f)</label>
                        <input type="number" id="focalLength" value="500" step="1">
                    </div>
                </div>
            </div>
            
            <div class="output-section">
                <h2>输出结果</h2>
                
                <div class="format-selector">
                    <label>输出格式:</label>
                    <div class="format-buttons">
                        <button class="format-btn active" data-format="multiline">多行格式</button>
                        <button class="format-btn" data-format="inline">单行格式</button>
                    </div>
                </div>
                
                <div class="output-result" id="outputResult">
                    <!-- 结果将在这里显示 -->
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // 获取所有输入元素
            const inputs = document.querySelectorAll('input[type="number"]');
            const advancedToggle = document.getElementById('advancedToggle');
            const advancedOptions = document.getElementById('advancedOptions');
            const formatButtons = document.querySelectorAll('.format-btn');
            const outputResult = document.getElementById('outputResult');
            
            // 初始计算
            calculateProjection();
            
            // 为所有输入添加事件监听
            inputs.forEach(input => {
                input.addEventListener('input', calculateProjection);
            });
            
            // 高级选项切换
            advancedToggle.addEventListener('click', function() {
                advancedOptions.classList.toggle('show');
                this.textContent = advancedOptions.classList.contains('show') ? 
                    '▲ 高级选项' : '▼ 高级选项';
            });
            
            // 格式切换
            formatButtons.forEach(button => {
                button.addEventListener('click', function() {
                    formatButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    calculateProjection();
                });
            });
            
            // 计算投影函数
            function calculateProjection() {
                // 获取输入值
                const x = parseFloat(document.getElementById('x').value)-50 || 0;
                const y = parseFloat(document.getElementById('y').value)-50 || 0;
                const z = parseFloat(document.getElementById('z').value) || 0;
                const rotateX = parseFloat(document.getElementById('rotateX').value) || 0;
                const rotateY = parseFloat(document.getElementById('rotateY').value) || 0;
                const scale = parseFloat(document.getElementById('scale').value) || 0;
                const alpha = parseFloat(document.getElementById('alpha').value) || 0;
                const f = parseFloat(document.getElementById('focalLength').value) || 500;
                
                // 计算新值
                const newX = (f * x) / (f + z) + 50;
                const newY = (f * y) / (f + z) + 50;
                const newScale = (f * scale) / (f + z);
                
                // 计算旋转角度 (需要将角度转换为弧度进行计算)
                const radianConvert = Math.PI / 180;
                const newRotateX = rotateX - Math.atan(x / (f + z)) / radianConvert;
                const newRotateY = rotateY - Math.atan(y / (f + z)) / radianConvert;
                
                // 计算alpha值
                let newAlpha = alpha / ( z / 10 );
                if (newAlpha > 1) newAlpha = 1;
                
                // 获取当前选择的格式
                const currentFormat = document.querySelector('.format-btn.active').dataset.format;
                
                // 格式化输出
                let output = '';
                
                if (currentFormat === 'multiline') {
                    output = `{ \n    x = ${newX.toFixed(2)}%\n` +
                             `    y = ${newY.toFixed(2)}%\n` +
                             `    rotateX = ${newRotateY.toFixed(2)}\n` +
                             `    rotateY = ${newRotateX.toFixed(2)}\n` +
                             `    scale = ${newScale.toFixed(2)}\n` +
                             `    alpha = ${newAlpha.toFixed(2)}\n}`;
                } else {
                    output = `{ x = ${newX.toFixed(2)}%, y = ${newY.toFixed(2)}%, ` +
                             `rotateX = ${newRotateX.toFixed(2)}, rotateY = ${newRotateY.toFixed(2)}, ` +
                             `scale = ${newScale.toFixed(2)}, alpha = ${newAlpha.toFixed(2)} }`;
                }
                
                // 更新输出
                outputResult.textContent = output;
            }
        });
    </script>
</body>
</html>